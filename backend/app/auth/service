# backend/app/auth/service.py

from passlib.context import CryptContext
from sqlalchemy.orm import Session
from app.auth.models import User
from app.core.security import create_access_token

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def register_user(db: Session, data):
    hashed_pw = pwd_context.hash(data.password)
    user = User(email=data.email, username=data.username, password=hashed_pw)
    db.add(user)
    db.commit()
    db.refresh(user)
    return create_access_token({"sub": user.email})

def login_user(db: Session, data):
    user = db.query(User).filter(User.email == data.email).first()
    if not user or not pwd_context.verify(data.password, user.password):
        return None
    return create_access_token({"sub": user.email})
