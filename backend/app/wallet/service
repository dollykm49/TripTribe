# backend/app/wallet/service.py

from app.wallet.models import Wallet, Transaction, SavingsGoal
from sqlalchemy.orm import Session

def get_or_create_wallet(db: Session, user_id: int):
    wallet = db.query(Wallet).filter_by(user_id=user_id).first()
    if not wallet:
        wallet = Wallet(user_id=user_id)
        db.add(wallet)
        db.commit()
    return wallet

def transfer_funds(db: Session, data):
    from_wallet = get_or_create_wallet(db, data.from_user)
    to_wallet = get_or_create_wallet(db, data.to_user)
    if from_wallet.balance < data.amount:
        raise ValueError("Insufficient funds")
    from_wallet.balance -= data.amount
    to_wallet.balance += data.amount
    txn = Transaction(**data.dict())
    db.add(txn)
    db.commit()
    return txn

def create_savings_goal(db: Session, data):
    goal = SavingsGoal(**data.dict())
    db.add(goal)
    db.commit()
    return goal
