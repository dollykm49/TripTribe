# backend/app/trips/routes.py

from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from app.db.session import SessionLocal
from app.trips import schemas, service

trip_router = APIRouter()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@trip_router.post("/")
def create_trip(data: schemas.TripCreate, db: Session = Depends(get_db)):
    return service.create_trip(db, data)

@trip_router.post("/itinerary")
def add_item(data: schemas.ItineraryCreate, db: Session = Depends(get_db)):
    return service.add_itinerary_item(db, data)

@trip_router.get("/routes")
def get_routes(start: str, destination: str, prefs: str = ""):
    return service.generate_routes(start, destination, prefs)

@trip_router.get("/itinerary")
def get_itinerary(trip_id: int, db: Session = Depends(get_db)):
    return db.query(ItineraryItem).filter_by(trip_id=trip_id).order_by(ItineraryItem.start_time).all()

@trip_router.put("/itinerary/{item_id}")
def update_item(item_id: int, data: schemas.ItineraryItemCreate, db: Session = Depends(get_db)):
    item = db.query(ItineraryItem).filter_by(id=item_id).first()
    for key, value in data.dict().items():
        setattr(item, key, value)
    db.commit()
    return item

@trip_router.delete("/itinerary/{item_id}")
def delete_item(item_id: int, db: Session = Depends(get_db)):
    db.query(ItineraryItem).filter_by(id=item_id).delete()
    db.commit()
    return {"status": "deleted"}
